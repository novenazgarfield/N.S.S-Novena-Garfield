# 🧠 N.S.S-Novena-Garfield 统一项目依赖配置
# 多模态AI融合研究工作站 - 完整系统依赖
# 更新时间：2025-09-04
# 项目状态：系统优化与清理完成 ✅

# ============================================================================
# 🧠 核心框架依赖
# ============================================================================

# Web框架
streamlit>=1.28.0
fastapi>=0.104.0
uvicorn>=0.24.0
flask>=2.3.0
flask-cors>=4.0.0
django>=4.2.0
tornado>=6.2.0

# 异步处理
celery>=5.3.0
redis>=4.5.0
aiohttp>=3.8.0
asyncio-mqtt>=0.11.0

# ============================================================================
# 🔬 科学计算与数据处理
# ============================================================================

# 核心科学计算
numpy>=1.21.0
pandas>=1.3.0
scipy>=1.7.0
scikit-learn>=1.0.0
matplotlib>=3.5.0
seaborn>=0.11.0
plotly>=5.0.0

# 数据处理
openpyxl>=3.0.0
xlsxwriter>=3.0.0
pyyaml>=6.0.0
toml>=0.10.0
configparser>=5.3.0

# ============================================================================
# 🤖 机器学习与AI
# ============================================================================

# 深度学习框架
torch>=1.9.0
torchvision>=0.10.0
tensorflow>=2.8.0
transformers>=4.20.0
sentence-transformers>=2.2.0

# 向量数据库与检索
chromadb>=0.4.0
faiss-cpu>=1.7.0
pinecone-client>=2.2.0
weaviate-client>=3.20.0

# 自然语言处理
openai>=1.0.0
anthropic>=0.3.0
langchain>=0.1.0
langchain-community>=0.0.20
langchain-openai>=0.0.5

# ============================================================================
# 🧬 生物信息学专用
# ============================================================================

# 生物信息学核心
biopython>=1.79
pysam>=0.19.0
pyvcf>=0.6.8
bcbio-gff>=0.6.6

# 基因组分析
genomepy>=0.12.0
pybedtools>=0.9.0
pyranges>=0.0.111

# ============================================================================
# 🔬 分子动力学模拟
# ============================================================================

# 分子模拟
mdanalysis>=2.0.0
pymol-open-source>=2.5.0
rdkit>=2022.3.0
openmm>=7.7.0

# 化学信息学
chempy>=0.8.0
pubchempy>=1.0.4

# ============================================================================
# 🐄 计算机视觉
# ============================================================================

# 图像处理
opencv-python>=4.5.0
Pillow>=8.0.0
imageio>=2.19.0
scikit-image>=0.19.0

# 目标检测
ultralytics>=8.0.0
detectron2>=0.6.0
mmcv-full>=1.6.0

# ============================================================================
# 🎵 音频处理
# ============================================================================

# 音频处理
librosa>=0.9.0
soundfile>=0.10.0
pydub>=0.25.0
pyaudio>=0.2.11

# 音乐信息检索
music21>=7.0.0
essentia>=2.1b6.dev1034

# ============================================================================
# 📚 文档处理与知识管理
# ============================================================================

# 文档处理
pypdf2>=3.0.0
python-docx>=0.8.11
python-pptx>=0.6.21
markdown>=3.4.0

# 知识图谱
networkx>=2.8.0
rdflib>=6.2.0
owlready2>=0.39.0

# ============================================================================
# 🌐 网络与通信
# ============================================================================

# HTTP客户端
requests>=2.28.0
httpx>=0.24.0
urllib3>=1.26.0

# WebSocket
websockets>=10.4.0
socketio>=5.7.0

# ============================================================================
# 🗄️ 数据库
# ============================================================================

# 关系型数据库
psycopg2-binary>=2.9.0
pymongo>=4.2.0
sqlalchemy>=1.4.0
alembic>=1.8.0

# 键值存储
redis>=4.5.0
pymemcache>=4.0.0

# ============================================================================
# 🔧 系统工具
# ============================================================================

# 系统监控
psutil>=5.9.0
py-cpuinfo>=8.0.0
gpustat>=1.0.0

# 日志处理
loguru>=0.6.0
colorlog>=6.7.0

# 进程管理
supervisor>=4.2.0
gunicorn>=20.1.0

# ============================================================================
# 🧪 测试与开发
# ============================================================================

# 测试框架
pytest>=7.1.0
pytest-asyncio>=0.21.0
pytest-cov>=4.0.0
unittest-xml-reporting>=3.2.0

# 代码质量
black>=22.6.0
flake8>=5.0.0
mypy>=0.971.0
isort>=5.10.0

# ============================================================================
# 📦 打包与部署
# ============================================================================

# 打包工具
setuptools>=65.0.0
wheel>=0.37.0
build>=0.8.0

# 容器化
docker>=6.0.0
docker-compose>=1.29.0

# ============================================================================
# 🔐 安全与加密
# ============================================================================

# 加密
cryptography>=37.0.0
pycryptodome>=3.15.0
bcrypt>=3.2.0

# 认证
pyjwt>=2.4.0
passlib>=1.7.4

# ============================================================================
# 📊 监控与可观测性
# ============================================================================

# 监控
prometheus-client>=0.14.0
grafana-api>=1.0.3

# 追踪
opentelemetry-api>=1.12.0
jaeger-client>=4.8.0

# ============================================================================
# 📦 Node.js 本地安装指南
# ============================================================================

# 🎯 如果你选择轻量部署（不包含node_modules），请按以下步骤安装Node.js依赖：

# 📋 前置要求：
# - Node.js 16+ (推荐18+)
# - npm 8+ (通常随Node.js安装)

# 🔧 安装命令（在项目根目录执行）：

# 1️⃣ Chronicle系统 (AI实验记录系统)
# cd systems/chronicle
# npm install
# cd ../..

# 2️⃣ Changlee系统 (音乐学习系统)  
# cd systems/Changlee
# npm install
# cd ../..

# 3️⃣ NEXUS系统 (核心界面系统)
# cd systems/nexus
# npm install
# cd ../..

# 🚀 一键安装脚本（Linux/macOS）：
# #!/bin/bash
# echo "🔧 开始安装Node.js依赖..."
# cd systems/chronicle && npm install && echo "✅ Chronicle安装完成" && cd ../..
# cd systems/Changlee && npm install && echo "✅ Changlee安装完成" && cd ../..
# cd systems/nexus && npm install && echo "✅ NEXUS安装完成" && cd ../..
# echo "🎉 所有Node.js依赖安装完成！"

# 🚀 一键安装脚本（Windows）：
# @echo off
# echo 🔧 开始安装Node.js依赖...
# cd systems\chronicle && npm install && echo ✅ Chronicle安装完成 && cd ..\..
# cd systems\Changlee && npm install && echo ✅ Changlee安装完成 && cd ..\..
# cd systems\nexus && npm install && echo ✅ NEXUS安装完成 && cd ..\..
# echo 🎉 所有Node.js依赖安装完成！

# 📊 预期安装大小：
# - Chronicle: ~116MB (571个包)
# - Changlee: ~558MB (556个包) 
# - NEXUS: ~918MB (461个包)
# - 总计: ~1.6GB

# ⏱️ 预期安装时间：
# - 快速网络: 5-10分钟
# - 普通网络: 10-20分钟
# - 慢速网络: 20-30分钟

# 🔍 验证安装：
# cd systems/chronicle && node chronicle.js --help
# cd systems/Changlee && node changlee.js --help  
# cd systems/nexus && npm run dev

# 🛠️ 常见问题解决：
# 
# 问题1: npm install失败
# 解决: npm cache clean --force && npm install
#
# 问题2: 权限错误 (Linux/macOS)
# 解决: sudo npm install 或配置npm全局目录
#
# 问题3: 网络超时
# 解决: npm config set registry https://registry.npmmirror.com
#
# 问题4: Python依赖错误 (node-gyp)
# 解决: 确保已安装Python 3.x和构建工具
#
# 问题5: 磁盘空间不足
# 解决: 确保至少有2GB可用空间

# 🎯 可选：使用yarn替代npm（更快）
# npm install -g yarn
# cd systems/chronicle && yarn install
# cd systems/Changlee && yarn install  
# cd systems/nexus && yarn install

# 🎯 可选：使用pnpm替代npm（节省空间）
# npm install -g pnpm
# cd systems/chronicle && pnpm install
# cd systems/Changlee && pnpm install
# cd systems/nexus && pnpm install


# ============================================================================
# 🔧 补充依赖（修复测试中发现的问题）
# ============================================================================

# LLM本地推理
llama-cpp-python>=0.2.0
gguf>=0.1.0

# 额外的科学计算库
sympy>=1.11.0
numba>=0.57.0

# 系统监控增强
rich>=13.0.0
tqdm>=4.64.0

